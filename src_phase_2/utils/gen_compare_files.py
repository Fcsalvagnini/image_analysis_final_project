# To execute the code, please took some inspiration in the sample below
# 
import argparse
import os
import numpy as np
import itertools
import random

def get_fingerprint_subjects(images_list):
    subjects = np.unique(list(
        map(lambda img_name : img_name.split("_")[0], images_list)
    ))

    return subjects

def get_all_possible_comparisons(list_1, list_2):
    comparisons = []
    permutated = itertools.permutations(list_1, len(list_2))
    for combination in permutated:
        zipped = zip(combination, list_2)
        pairs = list(zipped)
        for pair in pairs:
            if pair[0] != pair[1]:
                comparisons.append(f"{pair[0]} {pair[1]}")

    return comparisons

def write_comparisons(
        subjects, false_pairs_by_subject, images_by_false_pair,
        images_list, output_file
    ):
    if images_by_false_pair > 3:
        images_by_false_pair = 3

    comparisons_to_write_to_txt = []
    for subject in subjects:
        subject_images = [
            image for image in images_list if subject in image
        ]

        comparisons_to_write_to_txt += get_all_possible_comparisons(
            subject_images, subject_images
        )

        other_subjects = subjects[subjects!=subject]
        if false_pairs_by_subject > len(other_subjects):
            false_pairs_by_subject = len(other_subjects)
        other_subjects = random.sample(list(other_subjects), false_pairs_by_subject)

        for other_subject in other_subjects:
            other_subject_images = [
                image for image in images_list if other_subject in image
            ]
            other_subject_images =random.sample(other_subject_images, images_by_false_pair)

            comparisons_to_write_to_txt += get_all_possible_comparisons(
                subject_images, other_subject_images
            )

    comparisons_to_write_to_txt = list(np.unique(comparisons_to_write_to_txt))
    n_comparisons = len(comparisons_to_write_to_txt)

    with open(output_file, "w") as file:
        file.write(f"{n_comparisons}\n")
        file.writelines(comparison + "\n" for comparison in comparisons_to_write_to_txt)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Registry Configuration Generator")
    parser.add_argument(
        '--input_folder', type=str, help='Path to save the compare.txt file',
        default='../images_02/'
    )
    parser.add_argument(
        '--false_pairs', type=int, default=3,
        help='Number of false_pairs that should be generated by each fingerprint subject'
    )
    parser.add_argument(
        '--images_by_false_pair', type=int, default=3,
        help='Number of subject images for each false pair (1, 2, or 3)'
    )
    parser.add_argument(
        '--output_file', type=str, help='Path to save the compare.txt file',
        default="../compare_files/compare.txt"
    )

    args = parser.parse_args()

    images_list = os.listdir(args.input_folder)
    # Separate subjects by subset (Train,validation and test)
    fingerprint_subjects = get_fingerprint_subjects(images_list)

    write_comparisons(fingerprint_subjects,
                        args.false_pairs,
                        args.images_by_false_pair,
                        images_list,
                        args.output_file
    )